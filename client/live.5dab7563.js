import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, b as validate_slots, f as space, e as element, t as text, w as query_selector_all, l as detach_dev, h as claim_space, g as claim_element, j as children, k as claim_text, m as attr_dev, n as add_location, o as insert_dev, p as append_dev, r as noop } from './client.4e401bf2.js';
import { a as BASE_HOST } from './constants.e85bc00e.js';

/* src/routes/live.svelte generated by Svelte v3.24.0 */
const file = "src/routes/live.svelte";

function create_fragment(ctx) {
	let t0;
	let section0;
	let div1;
	let div0;
	let h1;
	let t1;
	let t2;
	let section1;
	let div2;
	let iframe0;
	let iframe0_src_value;
	let t3;
	let section2;
	let div3;
	let h2;
	let t4;
	let t5;
	let iframe1;
	let iframe1_src_value;

	const block = {
		c: function create() {
			t0 = space();
			section0 = element("section");
			div1 = element("div");
			div0 = element("div");
			h1 = element("h1");
			t1 = text("Live");
			t2 = space();
			section1 = element("section");
			div2 = element("div");
			iframe0 = element("iframe");
			t3 = space();
			section2 = element("section");
			div3 = element("div");
			h2 = element("h2");
			t4 = text("Chat stream");
			t5 = space();
			iframe1 = element("iframe");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-17ktgzf\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section0 = claim_element(nodes, "SECTION", { class: true });
			var section0_nodes = children(section0);
			div1 = claim_element(section0_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h1 = claim_element(div0_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Live");
			h1_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			section0_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			section1 = claim_element(nodes, "SECTION", {});
			var section1_nodes = children(section1);
			div2 = claim_element(section1_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);

			iframe0 = claim_element(div2_nodes, "IFRAME", {
				id: true,
				title: true,
				src: true,
				frameborder: true,
				allowfullscreen: true,
				scrolling: true,
				height: true,
				width: true,
				class: true
			});

			children(iframe0).forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			section1_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			section2 = claim_element(nodes, "SECTION", { class: true });
			var section2_nodes = children(section2);
			div3 = claim_element(section2_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			h2 = claim_element(div3_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t4 = claim_text(h2_nodes, "Chat stream");
			h2_nodes.forEach(detach_dev);
			t5 = claim_space(div3_nodes);

			iframe1 = claim_element(div3_nodes, "IFRAME", {
				id: true,
				title: true,
				src: true,
				height: true,
				width: true,
				class: true
			});

			children(iframe1).forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			section2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Live";
			attr_dev(h1, "class", "title");
			add_location(h1, file, 21, 6, 302);
			attr_dev(div0, "class", "container");
			add_location(div0, file, 20, 4, 272);
			attr_dev(div1, "class", "hero-body");
			add_location(div1, file, 19, 2, 244);
			attr_dev(section0, "class", "hero is-primary");
			add_location(section0, file, 18, 0, 208);
			attr_dev(iframe0, "id", "twitch-video");
			attr_dev(iframe0, "title", "Twitch video stream");
			if (iframe0.src !== (iframe0_src_value = "https://player.twitch.tv/?channel=goldsmiths_comparts&parent=" + BASE_HOST)) attr_dev(iframe0, "src", iframe0_src_value);
			attr_dev(iframe0, "frameborder", "0");
			iframe0.allowFullscreen = "true";
			attr_dev(iframe0, "scrolling", "no");
			attr_dev(iframe0, "height", "500");
			attr_dev(iframe0, "width", "900");
			attr_dev(iframe0, "class", "svelte-wjjmqy");
			add_location(iframe0, file, 28, 4, 402);
			attr_dev(div2, "class", "container");
			add_location(div2, file, 27, 2, 374);
			add_location(section1, file, 26, 0, 362);
			attr_dev(h2, "class", "subtitle");
			add_location(h2, file, 42, 4, 743);
			attr_dev(iframe1, "id", "twitch-chat");
			attr_dev(iframe1, "title", "Twitch chat");
			if (iframe1.src !== (iframe1_src_value = "https://www.twitch.tv/embed/goldsmiths_comparts/chat?parent=" + BASE_HOST)) attr_dev(iframe1, "src", iframe1_src_value);
			attr_dev(iframe1, "height", "500");
			attr_dev(iframe1, "width", "900");
			attr_dev(iframe1, "class", "svelte-wjjmqy");
			add_location(iframe1, file, 44, 4, 786);
			attr_dev(div3, "class", "container");
			add_location(div3, file, 41, 2, 715);
			attr_dev(section2, "class", "chat svelte-wjjmqy");
			add_location(section2, file, 40, 0, 690);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section0, anchor);
			append_dev(section0, div1);
			append_dev(div1, div0);
			append_dev(div0, h1);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, section1, anchor);
			append_dev(section1, div2);
			append_dev(div2, iframe0);
			insert_dev(target, t3, anchor);
			insert_dev(target, section2, anchor);
			append_dev(section2, div3);
			append_dev(div3, h2);
			append_dev(h2, t4);
			append_dev(div3, t5);
			append_dev(div3, iframe1);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(section1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(section2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Live> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Live", $$slots, []);
	$$self.$capture_state = () => ({ BASE_HOST });
	return [];
}

class Live extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Live",
			options,
			id: create_fragment.name
		});
	}
}

export default Live;
