import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, F as validate_each_argument, b as validate_slots, e as element, f as space, t as text, g as claim_element, j as children, l as detach_dev, h as claim_space, k as claim_text, m as attr_dev, C as set_style, n as add_location, o as insert_dev, p as append_dev, q as set_data_dev, w as query_selector_all, r as noop, I as destroy_each } from './client.cfba85bb.js';
import { t as tsvParse } from './tsv.6a7ced64.js';
import { s as slugify } from './helpers.ce81ccb7.js';

/* src/routes/artists/index.svelte generated by Svelte v3.24.0 */
const file = "src/routes/artists/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (81:8) {#each artists as artist}
function create_each_block(ctx) {
	let div1;
	let a;
	let div0;
	let t0;
	let h6;
	let t1_value = /*artist*/ ctx[2].name + "";
	let t1;
	let t2;

	let t3_value = (/*artist*/ ctx[2].otherName
	? `  (${/*artist*/ ctx[2].otherName})`
	: "") + "";

	let t3;
	let a_href_value;
	let t4;

	const block = {
		c: function create() {
			div1 = element("div");
			a = element("a");
			div0 = element("div");
			t0 = space();
			h6 = element("h6");
			t1 = text(t1_value);
			t2 = space();
			t3 = text(t3_value);
			t4 = space();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			a = claim_element(div1_nodes, "A", { href: true });
			var a_nodes = children(a);
			div0 = claim_element(a_nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(a_nodes);
			h6 = claim_element(a_nodes, "H6", { class: true });
			var h6_nodes = children(h6);
			t1 = claim_text(h6_nodes, t1_value);
			t2 = claim_space(h6_nodes);
			t3 = claim_text(h6_nodes, t3_value);
			h6_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t4 = claim_space(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "bio-photo svelte-ex8ylq");
			set_style(div0, "background-image", "url(img/bios/" + /*artist*/ ctx[2].username + ".jpeg)");
			add_location(div0, file, 83, 14, 1750);
			attr_dev(h6, "class", "svelte-ex8ylq");
			add_location(h6, file, 87, 14, 1903);
			attr_dev(a, "href", a_href_value = "artists/" + slugify(/*artist*/ ctx[2].name));
			add_location(a, file, 82, 12, 1694);
			attr_dev(div1, "class", "bio-box svelte-ex8ylq");
			add_location(div1, file, 81, 10, 1660);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, a);
			append_dev(a, div0);
			append_dev(a, t0);
			append_dev(a, h6);
			append_dev(h6, t1);
			append_dev(h6, t2);
			append_dev(h6, t3);
			append_dev(div1, t4);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*artists*/ 1) {
				set_style(div0, "background-image", "url(img/bios/" + /*artist*/ ctx[2].username + ".jpeg)");
			}

			if (dirty & /*artists*/ 1 && t1_value !== (t1_value = /*artist*/ ctx[2].name + "")) set_data_dev(t1, t1_value);

			if (dirty & /*artists*/ 1 && t3_value !== (t3_value = (/*artist*/ ctx[2].otherName
			? `  (${/*artist*/ ctx[2].otherName})`
			: "") + "")) set_data_dev(t3, t3_value);

			if (dirty & /*artists*/ 1 && a_href_value !== (a_href_value = "artists/" + slugify(/*artist*/ ctx[2].name))) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(81:8) {#each artists as artist}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let section;
	let div2;
	let div1;
	let div0;
	let each_value = /*artists*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t = space();
			section = element("section");
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1xemdmz\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div2 = claim_element(section_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Final Show - 2020";
			attr_dev(div0, "class", "bio-boxes svelte-ex8ylq");
			add_location(div0, file, 78, 6, 1591);
			attr_dev(div1, "class", "content");
			add_location(div1, file, 76, 4, 1562);
			attr_dev(div2, "class", "container");
			add_location(div2, file, 75, 2, 1534);
			attr_dev(section, "class", "section bg-col-7");
			add_location(section, file, 74, 0, 1497);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, div2);
			append_dev(div2, div1);
			append_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*slugify, artists*/ 1) {
				each_value = /*artists*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(section);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params }) {
	const artistsRows = await this.fetch("artists.tsv").then(d => d.text());
	return { artistsRows };
}

function instance($$self, $$props, $$invalidate) {
	let { artistsRows } = $$props;
	const writable_props = ["artistsRows"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Artists> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Artists", $$slots, []);

	$$self.$set = $$props => {
		if ("artistsRows" in $$props) $$invalidate(1, artistsRows = $$props.artistsRows);
	};

	$$self.$capture_state = () => ({
		preload,
		tsvParse,
		slugify,
		artistsRows,
		artists
	});

	$$self.$inject_state = $$props => {
		if ("artistsRows" in $$props) $$invalidate(1, artistsRows = $$props.artistsRows);
		if ("artists" in $$props) $$invalidate(0, artists = $$props.artists);
	};

	let artists;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*artistsRows*/ 2) {
			// Make a list of unique artist names
			 $$invalidate(0, artists = tsvParse(artistsRows).sort((a, b) => a.name.localeCompare(b.name, "en", { sensitivity: "base" })));
		}
	};

	return [artists, artistsRows];
}

class Artists extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { artistsRows: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Artists",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*artistsRows*/ ctx[1] === undefined && !("artistsRows" in props)) {
			console.warn("<Artists> was created without expected prop 'artistsRows'");
		}
	}

	get artistsRows() {
		throw new Error("<Artists>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set artistsRows(value) {
		throw new Error("<Artists>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Artists;
export { preload };
