import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, a as stores$1, v as validate_store, c as component_subscribe, b as validate_slots, e as element, f as space, t as text, g as claim_element, h as claim_space, j as children, k as claim_text, l as detach_dev, m as attr_dev, n as add_location, o as insert_dev, p as append_dev, q as set_data_dev, r as noop, u as create_component, w as query_selector_all, x as claim_component, y as mount_component, z as transition_in, A as transition_out, B as destroy_component } from './client.cfba85bb.js';
import { t as tsvParse } from './tsv.6a7ced64.js';
import { s as slugify } from './helpers.ce81ccb7.js';
import { B as BASE_URL } from './constants.e85bc00e.js';

/* src/components/Meta.svelte generated by Svelte v3.24.0 */
const file = "src/components/Meta.svelte";

function create_fragment(ctx) {
	let link;
	let t0;
	let title_1;
	let t1;
	let t2;
	let meta0;
	let t3;
	let meta1;
	let meta1_content_value;
	let t4;
	let meta2;
	let t5;
	let meta3;
	let meta3_content_value;
	let t6;
	let meta4;
	let t7;
	let meta5;

	const block = {
		c: function create() {
			link = element("link");
			t0 = space();
			title_1 = element("title");
			t1 = text(/*title*/ ctx[1]);
			t2 = space();
			meta0 = element("meta");
			t3 = space();
			meta1 = element("meta");
			t4 = space();
			meta2 = element("meta");
			t5 = space();
			meta3 = element("meta");
			t6 = space();
			meta4 = element("meta");
			t7 = space();
			meta5 = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			link = claim_element(nodes, "LINK", { rel: true, href: true });
			t0 = claim_space(nodes);
			title_1 = claim_element(nodes, "TITLE", {});
			var title_1_nodes = children(title_1);
			t1 = claim_text(title_1_nodes, /*title*/ ctx[1]);
			title_1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			meta0 = claim_element(nodes, "META", { property: true, content: true });
			t3 = claim_space(nodes);
			meta1 = claim_element(nodes, "META", { property: true, content: true });
			t4 = claim_space(nodes);
			meta2 = claim_element(nodes, "META", { property: true, content: true });
			t5 = claim_space(nodes);
			meta3 = claim_element(nodes, "META", { property: true, content: true });
			t6 = claim_space(nodes);
			meta4 = claim_element(nodes, "META", { property: true, content: true });
			t7 = claim_space(nodes);
			meta5 = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(link, "rel", "stylesheet");
			attr_dev(link, "href", "css/global.css");
			add_location(link, file, 14, 0, 361);
			add_location(title_1, file, 16, 0, 408);
			attr_dev(meta0, "property", "og:title");
			attr_dev(meta0, "content", /*title*/ ctx[1]);
			add_location(meta0, file, 17, 0, 431);
			attr_dev(meta1, "property", "og:url");
			attr_dev(meta1, "content", meta1_content_value = BASE_URL + /*url*/ ctx[0]);
			add_location(meta1, file, 18, 0, 476);
			attr_dev(meta2, "property", "og:description");
			attr_dev(meta2, "content", /*description*/ ctx[2]);
			add_location(meta2, file, 19, 0, 528);
			attr_dev(meta3, "property", "og:image");
			attr_dev(meta3, "content", meta3_content_value = BASE_URL + /*image*/ ctx[3]);
			add_location(meta3, file, 20, 0, 585);
			attr_dev(meta4, "property", "og:image:width");
			attr_dev(meta4, "content", /*imageWidth*/ ctx[4]);
			add_location(meta4, file, 21, 0, 641);
			attr_dev(meta5, "property", "og:image:height");
			attr_dev(meta5, "content", /*imageHeight*/ ctx[5]);
			add_location(meta5, file, 22, 0, 697);
		},
		m: function mount(target, anchor) {
			insert_dev(target, link, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, title_1, anchor);
			append_dev(title_1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, meta0, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, meta1, anchor);
			insert_dev(target, t4, anchor);
			insert_dev(target, meta2, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, meta3, anchor);
			insert_dev(target, t6, anchor);
			insert_dev(target, meta4, anchor);
			insert_dev(target, t7, anchor);
			insert_dev(target, meta5, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*title*/ 2) set_data_dev(t1, /*title*/ ctx[1]);

			if (dirty & /*title*/ 2) {
				attr_dev(meta0, "content", /*title*/ ctx[1]);
			}

			if (dirty & /*url*/ 1 && meta1_content_value !== (meta1_content_value = BASE_URL + /*url*/ ctx[0])) {
				attr_dev(meta1, "content", meta1_content_value);
			}

			if (dirty & /*description*/ 4) {
				attr_dev(meta2, "content", /*description*/ ctx[2]);
			}

			if (dirty & /*image*/ 8 && meta3_content_value !== (meta3_content_value = BASE_URL + /*image*/ ctx[3])) {
				attr_dev(meta3, "content", meta3_content_value);
			}

			if (dirty & /*imageWidth*/ 16) {
				attr_dev(meta4, "content", /*imageWidth*/ ctx[4]);
			}

			if (dirty & /*imageHeight*/ 32) {
				attr_dev(meta5, "content", /*imageHeight*/ ctx[5]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(link);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(title_1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(meta0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(meta1);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(meta2);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(meta3);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(meta4);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(meta5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $page;
	const { page } = stores$1();
	validate_store(page, "page");
	component_subscribe($$self, page, value => $$invalidate(7, $page = value));
	let { url = $page.path } = $$props;
	let { title } = $$props;
	let { description = "17-20 September 2020" } = $$props;
	let { image = "/img/social/facebook_1200x630.jpg" } = $$props;
	let { imageWidth = 1200 } = $$props;
	let { imageHeight = 630 } = $$props;
	const writable_props = ["url", "title", "description", "image", "imageWidth", "imageHeight"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Meta> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Meta", $$slots, []);

	$$self.$set = $$props => {
		if ("url" in $$props) $$invalidate(0, url = $$props.url);
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
		if ("description" in $$props) $$invalidate(2, description = $$props.description);
		if ("image" in $$props) $$invalidate(3, image = $$props.image);
		if ("imageWidth" in $$props) $$invalidate(4, imageWidth = $$props.imageWidth);
		if ("imageHeight" in $$props) $$invalidate(5, imageHeight = $$props.imageHeight);
	};

	$$self.$capture_state = () => ({
		stores: stores$1,
		page,
		BASE_URL,
		url,
		title,
		description,
		image,
		imageWidth,
		imageHeight,
		$page
	});

	$$self.$inject_state = $$props => {
		if ("url" in $$props) $$invalidate(0, url = $$props.url);
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
		if ("description" in $$props) $$invalidate(2, description = $$props.description);
		if ("image" in $$props) $$invalidate(3, image = $$props.image);
		if ("imageWidth" in $$props) $$invalidate(4, imageWidth = $$props.imageWidth);
		if ("imageHeight" in $$props) $$invalidate(5, imageHeight = $$props.imageHeight);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [url, title, description, image, imageWidth, imageHeight, page];
}

class Meta extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			url: 0,
			title: 1,
			description: 2,
			image: 3,
			imageWidth: 4,
			imageHeight: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Meta",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*title*/ ctx[1] === undefined && !("title" in props)) {
			console.warn("<Meta> was created without expected prop 'title'");
		}
	}

	get url() {
		throw new Error("<Meta>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<Meta>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Meta>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Meta>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get description() {
		throw new Error("<Meta>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set description(value) {
		throw new Error("<Meta>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get image() {
		throw new Error("<Meta>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set image(value) {
		throw new Error("<Meta>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get imageWidth() {
		throw new Error("<Meta>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set imageWidth(value) {
		throw new Error("<Meta>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get imageHeight() {
		throw new Error("<Meta>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set imageHeight(value) {
		throw new Error("<Meta>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/index.svelte generated by Svelte v3.24.0 */
const file$1 = "src/routes/index.svelte";

function create_fragment$1(ctx) {
	let meta;
	let t0;
	let div8;
	let section;
	let div7;
	let div6;
	let div5;
	let div0;
	let t1;
	let div4;
	let div1;
	let h20;
	let t2;
	let t3;
	let h21;
	let t4;
	let t5;
	let h22;
	let t6;
	let t7;
	let div2;
	let t8;
	let t9;
	let div3;
	let a0;
	let t10;
	let t11;
	let a1;
	let t12;
	let current;

	meta = new Meta({
			props: {
				title: "Chimera Garden - Computational Arts MA/MFA Degree Show Goldsmiths"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(meta.$$.fragment);
			t0 = space();
			div8 = element("div");
			section = element("section");
			div7 = element("div");
			div6 = element("div");
			div5 = element("div");
			div0 = element("div");
			t1 = space();
			div4 = element("div");
			div1 = element("div");
			h20 = element("h2");
			t2 = text("17-20 September 2020");
			t3 = space();
			h21 = element("h2");
			t4 = text("The Computational Arts MA/MFA Degree Show");
			t5 = space();
			h22 = element("h2");
			t6 = text("Goldsmiths, University of London");
			t7 = space();
			div2 = element("div");
			t8 = text("Chimera Garden is a ​celebration of Computational Art now​, a\n              blend of physical and online installation and performance, a\n              four-day festival open to all via free ticket registration at this\n              site soon.");
			t9 = space();
			div3 = element("div");
			a0 = element("a");
			t10 = text("EVENTS SCHEDULE");
			t11 = space();
			a1 = element("a");
			t12 = text("VISIT ON-SITE");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1vrppua\"]", document.head);
			claim_component(meta.$$.fragment, head_nodes);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div8 = claim_element(nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			section = claim_element(div8_nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div7 = claim_element(section_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			div6 = claim_element(div7_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div0 = claim_element(div5_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div1 = claim_element(div4_nodes, "DIV", {});
			var div1_nodes = children(div1);
			h20 = claim_element(div1_nodes, "H2", { class: true });
			var h20_nodes = children(h20);
			t2 = claim_text(h20_nodes, "17-20 September 2020");
			h20_nodes.forEach(detach_dev);
			t3 = claim_space(div1_nodes);
			h21 = claim_element(div1_nodes, "H2", { class: true });
			var h21_nodes = children(h21);
			t4 = claim_text(h21_nodes, "The Computational Arts MA/MFA Degree Show");
			h21_nodes.forEach(detach_dev);
			t5 = claim_space(div1_nodes);
			h22 = claim_element(div1_nodes, "H2", { class: true });
			var h22_nodes = children(h22);
			t6 = claim_text(h22_nodes, "Goldsmiths, University of London");
			h22_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t7 = claim_space(div4_nodes);
			div2 = claim_element(div4_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t8 = claim_text(div2_nodes, "Chimera Garden is a ​celebration of Computational Art now​, a\n              blend of physical and online installation and performance, a\n              four-day festival open to all via free ticket registration at this\n              site soon.");
			div2_nodes.forEach(detach_dev);
			t9 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", {});
			var div3_nodes = children(div3);
			a0 = claim_element(div3_nodes, "A", { href: true, class: true });
			var a0_nodes = children(a0);
			t10 = claim_text(a0_nodes, "EVENTS SCHEDULE");
			a0_nodes.forEach(detach_dev);
			t11 = claim_space(div3_nodes);
			a1 = claim_element(div3_nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			t12 = claim_text(a1_nodes, "VISIT ON-SITE");
			a1_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			div7_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "column is-6 leftColumn svelte-10pd6sb");
			add_location(div0, file$1, 119, 10, 2577);
			attr_dev(h20, "class", "showDates svelte-10pd6sb");
			add_location(h20, file$1, 124, 14, 2704);
			attr_dev(h21, "class", "subtitle svelte-10pd6sb");
			add_location(h21, file$1, 125, 14, 2766);
			attr_dev(h22, "class", "location svelte-10pd6sb");
			add_location(h22, file$1, 126, 14, 2848);
			add_location(div1, file$1, 123, 12, 2684);
			attr_dev(div2, "class", "introBodyStrong svelte-10pd6sb");
			add_location(div2, file$1, 128, 12, 2938);
			attr_dev(a0, "href", "/schedule");
			attr_dev(a0, "class", "rounded-link col-7 bd-col-7");
			add_location(a0, file$1, 135, 14, 3276);
			attr_dev(a1, "href", "/getting-there");
			attr_dev(a1, "class", "rounded-link col-7 bd-col-7");
			add_location(a1, file$1, 136, 14, 3366);
			add_location(div3, file$1, 134, 12, 3256);
			attr_dev(div4, "class", "column is-6");
			add_location(div4, file$1, 122, 10, 2646);
			attr_dev(div5, "class", "columns");
			add_location(div5, file$1, 118, 8, 2545);
			attr_dev(div6, "class", "container is-widescreen");
			add_location(div6, file$1, 117, 6, 2499);
			attr_dev(div7, "class", "hero-body");
			add_location(div7, file$1, 116, 4, 2469);
			attr_dev(section, "class", "hero");
			add_location(section, file$1, 115, 2, 2442);
			attr_dev(div8, "class", "hero-container");
			add_location(div8, file$1, 114, 0, 2411);
		},
		m: function mount(target, anchor) {
			mount_component(meta, document.head, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, div8, anchor);
			append_dev(div8, section);
			append_dev(section, div7);
			append_dev(div7, div6);
			append_dev(div6, div5);
			append_dev(div5, div0);
			append_dev(div5, t1);
			append_dev(div5, div4);
			append_dev(div4, div1);
			append_dev(div1, h20);
			append_dev(h20, t2);
			append_dev(div1, t3);
			append_dev(div1, h21);
			append_dev(h21, t4);
			append_dev(div1, t5);
			append_dev(div1, h22);
			append_dev(h22, t6);
			append_dev(div4, t7);
			append_dev(div4, div2);
			append_dev(div2, t8);
			append_dev(div4, t9);
			append_dev(div4, div3);
			append_dev(div3, a0);
			append_dev(a0, t10);
			append_dev(div3, t11);
			append_dev(div3, a1);
			append_dev(a1, t12);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(meta.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(meta.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(meta);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div8);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params }) {
	const artistsRows = await this.fetch("artists.tsv").then(d => d.text());
	return { artistsRows };
}

function instance$1($$self, $$props, $$invalidate) {
	let { artistsRows } = $$props;
	const writable_props = ["artistsRows"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);

	$$self.$set = $$props => {
		if ("artistsRows" in $$props) $$invalidate(0, artistsRows = $$props.artistsRows);
	};

	$$self.$capture_state = () => ({
		preload,
		tsvParse,
		slugify,
		Meta,
		artistsRows,
		artists
	});

	$$self.$inject_state = $$props => {
		if ("artistsRows" in $$props) $$invalidate(0, artistsRows = $$props.artistsRows);
		if ("artists" in $$props) artists = $$props.artists;
	};

	let artists;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*artistsRows*/ 1) {
			// console.log(artistsRows);
			 artists = tsvParse(artistsRows).sort((a, b) => a.name.localeCompare(b.name, "en", { sensitivity: "base" }));
		}
	};

	return [artistsRows];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { artistsRows: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*artistsRows*/ ctx[0] === undefined && !("artistsRows" in props)) {
			console.warn("<Routes> was created without expected prop 'artistsRows'");
		}
	}

	get artistsRows() {
		throw new Error("<Routes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set artistsRows(value) {
		throw new Error("<Routes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Routes;
export { preload };
